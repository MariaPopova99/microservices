// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: note.proto

package note_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LongShortV1Client is the client API for LongShortV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LongShortV1Client interface {
	GetShort(ctx context.Context, in *GetShortRequest, opts ...grpc.CallOption) (*GetShortResponse, error)
	GetLong(ctx context.Context, in *GetLongRequest, opts ...grpc.CallOption) (*GetLongResponse, error)
}

type longShortV1Client struct {
	cc grpc.ClientConnInterface
}

func NewLongShortV1Client(cc grpc.ClientConnInterface) LongShortV1Client {
	return &longShortV1Client{cc}
}

func (c *longShortV1Client) GetShort(ctx context.Context, in *GetShortRequest, opts ...grpc.CallOption) (*GetShortResponse, error) {
	out := new(GetShortResponse)
	err := c.cc.Invoke(ctx, "/note_v1.LongShortV1/GetShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longShortV1Client) GetLong(ctx context.Context, in *GetLongRequest, opts ...grpc.CallOption) (*GetLongResponse, error) {
	out := new(GetLongResponse)
	err := c.cc.Invoke(ctx, "/note_v1.LongShortV1/GetLong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LongShortV1Server is the server API for LongShortV1 service.
// All implementations must embed UnimplementedLongShortV1Server
// for forward compatibility
type LongShortV1Server interface {
	GetShort(context.Context, *GetShortRequest) (*GetShortResponse, error)
	GetLong(context.Context, *GetLongRequest) (*GetLongResponse, error)
	mustEmbedUnimplementedLongShortV1Server()
}

// UnimplementedLongShortV1Server must be embedded to have forward compatible implementations.
type UnimplementedLongShortV1Server struct {
}

func (UnimplementedLongShortV1Server) GetShort(context.Context, *GetShortRequest) (*GetShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShort not implemented")
}
func (UnimplementedLongShortV1Server) GetLong(context.Context, *GetLongRequest) (*GetLongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLong not implemented")
}
func (UnimplementedLongShortV1Server) mustEmbedUnimplementedLongShortV1Server() {}

// UnsafeLongShortV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LongShortV1Server will
// result in compilation errors.
type UnsafeLongShortV1Server interface {
	mustEmbedUnimplementedLongShortV1Server()
}

func RegisterLongShortV1Server(s grpc.ServiceRegistrar, srv LongShortV1Server) {
	s.RegisterService(&LongShortV1_ServiceDesc, srv)
}

func _LongShortV1_GetShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LongShortV1Server).GetShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_v1.LongShortV1/GetShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LongShortV1Server).GetShort(ctx, req.(*GetShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LongShortV1_GetLong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LongShortV1Server).GetLong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_v1.LongShortV1/GetLong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LongShortV1Server).GetLong(ctx, req.(*GetLongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LongShortV1_ServiceDesc is the grpc.ServiceDesc for LongShortV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LongShortV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "note_v1.LongShortV1",
	HandlerType: (*LongShortV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShort",
			Handler:    _LongShortV1_GetShort_Handler,
		},
		{
			MethodName: "GetLong",
			Handler:    _LongShortV1_GetLong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "note.proto",
}
