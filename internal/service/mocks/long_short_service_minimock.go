// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/MariaPopova99/microservices/internal/service.LongShortService -o long_short_service_minimock.go -n LongShortServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/MariaPopova99/microservices/internal/model"
	"github.com/gojuno/minimock/v3"
)

// LongShortServiceMock implements mm_service.LongShortService
type LongShortServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetLong          func(ctx context.Context, shortUrl *model.ShortUrls) (up1 *model.UrlFullInfo, err error)
	funcGetLongOrigin    string
	inspectFuncGetLong   func(ctx context.Context, shortUrl *model.ShortUrls)
	afterGetLongCounter  uint64
	beforeGetLongCounter uint64
	GetLongMock          mLongShortServiceMockGetLong

	funcGetShort          func(ctx context.Context, longUrl *model.LongUrls) (up1 *model.UrlFullInfo, err error)
	funcGetShortOrigin    string
	inspectFuncGetShort   func(ctx context.Context, longUrl *model.LongUrls)
	afterGetShortCounter  uint64
	beforeGetShortCounter uint64
	GetShortMock          mLongShortServiceMockGetShort
}

// NewLongShortServiceMock returns a mock for mm_service.LongShortService
func NewLongShortServiceMock(t minimock.Tester) *LongShortServiceMock {
	m := &LongShortServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetLongMock = mLongShortServiceMockGetLong{mock: m}
	m.GetLongMock.callArgs = []*LongShortServiceMockGetLongParams{}

	m.GetShortMock = mLongShortServiceMockGetShort{mock: m}
	m.GetShortMock.callArgs = []*LongShortServiceMockGetShortParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLongShortServiceMockGetLong struct {
	optional           bool
	mock               *LongShortServiceMock
	defaultExpectation *LongShortServiceMockGetLongExpectation
	expectations       []*LongShortServiceMockGetLongExpectation

	callArgs []*LongShortServiceMockGetLongParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// LongShortServiceMockGetLongExpectation specifies expectation struct of the LongShortService.GetLong
type LongShortServiceMockGetLongExpectation struct {
	mock               *LongShortServiceMock
	params             *LongShortServiceMockGetLongParams
	paramPtrs          *LongShortServiceMockGetLongParamPtrs
	expectationOrigins LongShortServiceMockGetLongExpectationOrigins
	results            *LongShortServiceMockGetLongResults
	returnOrigin       string
	Counter            uint64
}

// LongShortServiceMockGetLongParams contains parameters of the LongShortService.GetLong
type LongShortServiceMockGetLongParams struct {
	ctx      context.Context
	shortUrl *model.ShortUrls
}

// LongShortServiceMockGetLongParamPtrs contains pointers to parameters of the LongShortService.GetLong
type LongShortServiceMockGetLongParamPtrs struct {
	ctx      *context.Context
	shortUrl **model.ShortUrls
}

// LongShortServiceMockGetLongResults contains results of the LongShortService.GetLong
type LongShortServiceMockGetLongResults struct {
	up1 *model.UrlFullInfo
	err error
}

// LongShortServiceMockGetLongOrigins contains origins of expectations of the LongShortService.GetLong
type LongShortServiceMockGetLongExpectationOrigins struct {
	origin         string
	originCtx      string
	originShortUrl string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetLong *mLongShortServiceMockGetLong) Optional() *mLongShortServiceMockGetLong {
	mmGetLong.optional = true
	return mmGetLong
}

// Expect sets up expected params for LongShortService.GetLong
func (mmGetLong *mLongShortServiceMockGetLong) Expect(ctx context.Context, shortUrl *model.ShortUrls) *mLongShortServiceMockGetLong {
	if mmGetLong.mock.funcGetLong != nil {
		mmGetLong.mock.t.Fatalf("LongShortServiceMock.GetLong mock is already set by Set")
	}

	if mmGetLong.defaultExpectation == nil {
		mmGetLong.defaultExpectation = &LongShortServiceMockGetLongExpectation{}
	}

	if mmGetLong.defaultExpectation.paramPtrs != nil {
		mmGetLong.mock.t.Fatalf("LongShortServiceMock.GetLong mock is already set by ExpectParams functions")
	}

	mmGetLong.defaultExpectation.params = &LongShortServiceMockGetLongParams{ctx, shortUrl}
	mmGetLong.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetLong.expectations {
		if minimock.Equal(e.params, mmGetLong.defaultExpectation.params) {
			mmGetLong.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetLong.defaultExpectation.params)
		}
	}

	return mmGetLong
}

// ExpectCtxParam1 sets up expected param ctx for LongShortService.GetLong
func (mmGetLong *mLongShortServiceMockGetLong) ExpectCtxParam1(ctx context.Context) *mLongShortServiceMockGetLong {
	if mmGetLong.mock.funcGetLong != nil {
		mmGetLong.mock.t.Fatalf("LongShortServiceMock.GetLong mock is already set by Set")
	}

	if mmGetLong.defaultExpectation == nil {
		mmGetLong.defaultExpectation = &LongShortServiceMockGetLongExpectation{}
	}

	if mmGetLong.defaultExpectation.params != nil {
		mmGetLong.mock.t.Fatalf("LongShortServiceMock.GetLong mock is already set by Expect")
	}

	if mmGetLong.defaultExpectation.paramPtrs == nil {
		mmGetLong.defaultExpectation.paramPtrs = &LongShortServiceMockGetLongParamPtrs{}
	}
	mmGetLong.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetLong.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetLong
}

// ExpectShortUrlParam2 sets up expected param shortUrl for LongShortService.GetLong
func (mmGetLong *mLongShortServiceMockGetLong) ExpectShortUrlParam2(shortUrl *model.ShortUrls) *mLongShortServiceMockGetLong {
	if mmGetLong.mock.funcGetLong != nil {
		mmGetLong.mock.t.Fatalf("LongShortServiceMock.GetLong mock is already set by Set")
	}

	if mmGetLong.defaultExpectation == nil {
		mmGetLong.defaultExpectation = &LongShortServiceMockGetLongExpectation{}
	}

	if mmGetLong.defaultExpectation.params != nil {
		mmGetLong.mock.t.Fatalf("LongShortServiceMock.GetLong mock is already set by Expect")
	}

	if mmGetLong.defaultExpectation.paramPtrs == nil {
		mmGetLong.defaultExpectation.paramPtrs = &LongShortServiceMockGetLongParamPtrs{}
	}
	mmGetLong.defaultExpectation.paramPtrs.shortUrl = &shortUrl
	mmGetLong.defaultExpectation.expectationOrigins.originShortUrl = minimock.CallerInfo(1)

	return mmGetLong
}

// Inspect accepts an inspector function that has same arguments as the LongShortService.GetLong
func (mmGetLong *mLongShortServiceMockGetLong) Inspect(f func(ctx context.Context, shortUrl *model.ShortUrls)) *mLongShortServiceMockGetLong {
	if mmGetLong.mock.inspectFuncGetLong != nil {
		mmGetLong.mock.t.Fatalf("Inspect function is already set for LongShortServiceMock.GetLong")
	}

	mmGetLong.mock.inspectFuncGetLong = f

	return mmGetLong
}

// Return sets up results that will be returned by LongShortService.GetLong
func (mmGetLong *mLongShortServiceMockGetLong) Return(up1 *model.UrlFullInfo, err error) *LongShortServiceMock {
	if mmGetLong.mock.funcGetLong != nil {
		mmGetLong.mock.t.Fatalf("LongShortServiceMock.GetLong mock is already set by Set")
	}

	if mmGetLong.defaultExpectation == nil {
		mmGetLong.defaultExpectation = &LongShortServiceMockGetLongExpectation{mock: mmGetLong.mock}
	}
	mmGetLong.defaultExpectation.results = &LongShortServiceMockGetLongResults{up1, err}
	mmGetLong.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetLong.mock
}

// Set uses given function f to mock the LongShortService.GetLong method
func (mmGetLong *mLongShortServiceMockGetLong) Set(f func(ctx context.Context, shortUrl *model.ShortUrls) (up1 *model.UrlFullInfo, err error)) *LongShortServiceMock {
	if mmGetLong.defaultExpectation != nil {
		mmGetLong.mock.t.Fatalf("Default expectation is already set for the LongShortService.GetLong method")
	}

	if len(mmGetLong.expectations) > 0 {
		mmGetLong.mock.t.Fatalf("Some expectations are already set for the LongShortService.GetLong method")
	}

	mmGetLong.mock.funcGetLong = f
	mmGetLong.mock.funcGetLongOrigin = minimock.CallerInfo(1)
	return mmGetLong.mock
}

// When sets expectation for the LongShortService.GetLong which will trigger the result defined by the following
// Then helper
func (mmGetLong *mLongShortServiceMockGetLong) When(ctx context.Context, shortUrl *model.ShortUrls) *LongShortServiceMockGetLongExpectation {
	if mmGetLong.mock.funcGetLong != nil {
		mmGetLong.mock.t.Fatalf("LongShortServiceMock.GetLong mock is already set by Set")
	}

	expectation := &LongShortServiceMockGetLongExpectation{
		mock:               mmGetLong.mock,
		params:             &LongShortServiceMockGetLongParams{ctx, shortUrl},
		expectationOrigins: LongShortServiceMockGetLongExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetLong.expectations = append(mmGetLong.expectations, expectation)
	return expectation
}

// Then sets up LongShortService.GetLong return parameters for the expectation previously defined by the When method
func (e *LongShortServiceMockGetLongExpectation) Then(up1 *model.UrlFullInfo, err error) *LongShortServiceMock {
	e.results = &LongShortServiceMockGetLongResults{up1, err}
	return e.mock
}

// Times sets number of times LongShortService.GetLong should be invoked
func (mmGetLong *mLongShortServiceMockGetLong) Times(n uint64) *mLongShortServiceMockGetLong {
	if n == 0 {
		mmGetLong.mock.t.Fatalf("Times of LongShortServiceMock.GetLong mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetLong.expectedInvocations, n)
	mmGetLong.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetLong
}

func (mmGetLong *mLongShortServiceMockGetLong) invocationsDone() bool {
	if len(mmGetLong.expectations) == 0 && mmGetLong.defaultExpectation == nil && mmGetLong.mock.funcGetLong == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetLong.mock.afterGetLongCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetLong.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetLong implements mm_service.LongShortService
func (mmGetLong *LongShortServiceMock) GetLong(ctx context.Context, shortUrl *model.ShortUrls) (up1 *model.UrlFullInfo, err error) {
	mm_atomic.AddUint64(&mmGetLong.beforeGetLongCounter, 1)
	defer mm_atomic.AddUint64(&mmGetLong.afterGetLongCounter, 1)

	mmGetLong.t.Helper()

	if mmGetLong.inspectFuncGetLong != nil {
		mmGetLong.inspectFuncGetLong(ctx, shortUrl)
	}

	mm_params := LongShortServiceMockGetLongParams{ctx, shortUrl}

	// Record call args
	mmGetLong.GetLongMock.mutex.Lock()
	mmGetLong.GetLongMock.callArgs = append(mmGetLong.GetLongMock.callArgs, &mm_params)
	mmGetLong.GetLongMock.mutex.Unlock()

	for _, e := range mmGetLong.GetLongMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetLong.GetLongMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetLong.GetLongMock.defaultExpectation.Counter, 1)
		mm_want := mmGetLong.GetLongMock.defaultExpectation.params
		mm_want_ptrs := mmGetLong.GetLongMock.defaultExpectation.paramPtrs

		mm_got := LongShortServiceMockGetLongParams{ctx, shortUrl}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetLong.t.Errorf("LongShortServiceMock.GetLong got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetLong.GetLongMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.shortUrl != nil && !minimock.Equal(*mm_want_ptrs.shortUrl, mm_got.shortUrl) {
				mmGetLong.t.Errorf("LongShortServiceMock.GetLong got unexpected parameter shortUrl, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetLong.GetLongMock.defaultExpectation.expectationOrigins.originShortUrl, *mm_want_ptrs.shortUrl, mm_got.shortUrl, minimock.Diff(*mm_want_ptrs.shortUrl, mm_got.shortUrl))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetLong.t.Errorf("LongShortServiceMock.GetLong got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetLong.GetLongMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetLong.GetLongMock.defaultExpectation.results
		if mm_results == nil {
			mmGetLong.t.Fatal("No results are set for the LongShortServiceMock.GetLong")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetLong.funcGetLong != nil {
		return mmGetLong.funcGetLong(ctx, shortUrl)
	}
	mmGetLong.t.Fatalf("Unexpected call to LongShortServiceMock.GetLong. %v %v", ctx, shortUrl)
	return
}

// GetLongAfterCounter returns a count of finished LongShortServiceMock.GetLong invocations
func (mmGetLong *LongShortServiceMock) GetLongAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLong.afterGetLongCounter)
}

// GetLongBeforeCounter returns a count of LongShortServiceMock.GetLong invocations
func (mmGetLong *LongShortServiceMock) GetLongBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLong.beforeGetLongCounter)
}

// Calls returns a list of arguments used in each call to LongShortServiceMock.GetLong.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetLong *mLongShortServiceMockGetLong) Calls() []*LongShortServiceMockGetLongParams {
	mmGetLong.mutex.RLock()

	argCopy := make([]*LongShortServiceMockGetLongParams, len(mmGetLong.callArgs))
	copy(argCopy, mmGetLong.callArgs)

	mmGetLong.mutex.RUnlock()

	return argCopy
}

// MinimockGetLongDone returns true if the count of the GetLong invocations corresponds
// the number of defined expectations
func (m *LongShortServiceMock) MinimockGetLongDone() bool {
	if m.GetLongMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetLongMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetLongMock.invocationsDone()
}

// MinimockGetLongInspect logs each unmet expectation
func (m *LongShortServiceMock) MinimockGetLongInspect() {
	for _, e := range m.GetLongMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LongShortServiceMock.GetLong at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetLongCounter := mm_atomic.LoadUint64(&m.afterGetLongCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetLongMock.defaultExpectation != nil && afterGetLongCounter < 1 {
		if m.GetLongMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to LongShortServiceMock.GetLong at\n%s", m.GetLongMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to LongShortServiceMock.GetLong at\n%s with params: %#v", m.GetLongMock.defaultExpectation.expectationOrigins.origin, *m.GetLongMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLong != nil && afterGetLongCounter < 1 {
		m.t.Errorf("Expected call to LongShortServiceMock.GetLong at\n%s", m.funcGetLongOrigin)
	}

	if !m.GetLongMock.invocationsDone() && afterGetLongCounter > 0 {
		m.t.Errorf("Expected %d calls to LongShortServiceMock.GetLong at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetLongMock.expectedInvocations), m.GetLongMock.expectedInvocationsOrigin, afterGetLongCounter)
	}
}

type mLongShortServiceMockGetShort struct {
	optional           bool
	mock               *LongShortServiceMock
	defaultExpectation *LongShortServiceMockGetShortExpectation
	expectations       []*LongShortServiceMockGetShortExpectation

	callArgs []*LongShortServiceMockGetShortParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// LongShortServiceMockGetShortExpectation specifies expectation struct of the LongShortService.GetShort
type LongShortServiceMockGetShortExpectation struct {
	mock               *LongShortServiceMock
	params             *LongShortServiceMockGetShortParams
	paramPtrs          *LongShortServiceMockGetShortParamPtrs
	expectationOrigins LongShortServiceMockGetShortExpectationOrigins
	results            *LongShortServiceMockGetShortResults
	returnOrigin       string
	Counter            uint64
}

// LongShortServiceMockGetShortParams contains parameters of the LongShortService.GetShort
type LongShortServiceMockGetShortParams struct {
	ctx     context.Context
	longUrl *model.LongUrls
}

// LongShortServiceMockGetShortParamPtrs contains pointers to parameters of the LongShortService.GetShort
type LongShortServiceMockGetShortParamPtrs struct {
	ctx     *context.Context
	longUrl **model.LongUrls
}

// LongShortServiceMockGetShortResults contains results of the LongShortService.GetShort
type LongShortServiceMockGetShortResults struct {
	up1 *model.UrlFullInfo
	err error
}

// LongShortServiceMockGetShortOrigins contains origins of expectations of the LongShortService.GetShort
type LongShortServiceMockGetShortExpectationOrigins struct {
	origin        string
	originCtx     string
	originLongUrl string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetShort *mLongShortServiceMockGetShort) Optional() *mLongShortServiceMockGetShort {
	mmGetShort.optional = true
	return mmGetShort
}

// Expect sets up expected params for LongShortService.GetShort
func (mmGetShort *mLongShortServiceMockGetShort) Expect(ctx context.Context, longUrl *model.LongUrls) *mLongShortServiceMockGetShort {
	if mmGetShort.mock.funcGetShort != nil {
		mmGetShort.mock.t.Fatalf("LongShortServiceMock.GetShort mock is already set by Set")
	}

	if mmGetShort.defaultExpectation == nil {
		mmGetShort.defaultExpectation = &LongShortServiceMockGetShortExpectation{}
	}

	if mmGetShort.defaultExpectation.paramPtrs != nil {
		mmGetShort.mock.t.Fatalf("LongShortServiceMock.GetShort mock is already set by ExpectParams functions")
	}

	mmGetShort.defaultExpectation.params = &LongShortServiceMockGetShortParams{ctx, longUrl}
	mmGetShort.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetShort.expectations {
		if minimock.Equal(e.params, mmGetShort.defaultExpectation.params) {
			mmGetShort.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetShort.defaultExpectation.params)
		}
	}

	return mmGetShort
}

// ExpectCtxParam1 sets up expected param ctx for LongShortService.GetShort
func (mmGetShort *mLongShortServiceMockGetShort) ExpectCtxParam1(ctx context.Context) *mLongShortServiceMockGetShort {
	if mmGetShort.mock.funcGetShort != nil {
		mmGetShort.mock.t.Fatalf("LongShortServiceMock.GetShort mock is already set by Set")
	}

	if mmGetShort.defaultExpectation == nil {
		mmGetShort.defaultExpectation = &LongShortServiceMockGetShortExpectation{}
	}

	if mmGetShort.defaultExpectation.params != nil {
		mmGetShort.mock.t.Fatalf("LongShortServiceMock.GetShort mock is already set by Expect")
	}

	if mmGetShort.defaultExpectation.paramPtrs == nil {
		mmGetShort.defaultExpectation.paramPtrs = &LongShortServiceMockGetShortParamPtrs{}
	}
	mmGetShort.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetShort.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetShort
}

// ExpectLongUrlParam2 sets up expected param longUrl for LongShortService.GetShort
func (mmGetShort *mLongShortServiceMockGetShort) ExpectLongUrlParam2(longUrl *model.LongUrls) *mLongShortServiceMockGetShort {
	if mmGetShort.mock.funcGetShort != nil {
		mmGetShort.mock.t.Fatalf("LongShortServiceMock.GetShort mock is already set by Set")
	}

	if mmGetShort.defaultExpectation == nil {
		mmGetShort.defaultExpectation = &LongShortServiceMockGetShortExpectation{}
	}

	if mmGetShort.defaultExpectation.params != nil {
		mmGetShort.mock.t.Fatalf("LongShortServiceMock.GetShort mock is already set by Expect")
	}

	if mmGetShort.defaultExpectation.paramPtrs == nil {
		mmGetShort.defaultExpectation.paramPtrs = &LongShortServiceMockGetShortParamPtrs{}
	}
	mmGetShort.defaultExpectation.paramPtrs.longUrl = &longUrl
	mmGetShort.defaultExpectation.expectationOrigins.originLongUrl = minimock.CallerInfo(1)

	return mmGetShort
}

// Inspect accepts an inspector function that has same arguments as the LongShortService.GetShort
func (mmGetShort *mLongShortServiceMockGetShort) Inspect(f func(ctx context.Context, longUrl *model.LongUrls)) *mLongShortServiceMockGetShort {
	if mmGetShort.mock.inspectFuncGetShort != nil {
		mmGetShort.mock.t.Fatalf("Inspect function is already set for LongShortServiceMock.GetShort")
	}

	mmGetShort.mock.inspectFuncGetShort = f

	return mmGetShort
}

// Return sets up results that will be returned by LongShortService.GetShort
func (mmGetShort *mLongShortServiceMockGetShort) Return(up1 *model.UrlFullInfo, err error) *LongShortServiceMock {
	if mmGetShort.mock.funcGetShort != nil {
		mmGetShort.mock.t.Fatalf("LongShortServiceMock.GetShort mock is already set by Set")
	}

	if mmGetShort.defaultExpectation == nil {
		mmGetShort.defaultExpectation = &LongShortServiceMockGetShortExpectation{mock: mmGetShort.mock}
	}
	mmGetShort.defaultExpectation.results = &LongShortServiceMockGetShortResults{up1, err}
	mmGetShort.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetShort.mock
}

// Set uses given function f to mock the LongShortService.GetShort method
func (mmGetShort *mLongShortServiceMockGetShort) Set(f func(ctx context.Context, longUrl *model.LongUrls) (up1 *model.UrlFullInfo, err error)) *LongShortServiceMock {
	if mmGetShort.defaultExpectation != nil {
		mmGetShort.mock.t.Fatalf("Default expectation is already set for the LongShortService.GetShort method")
	}

	if len(mmGetShort.expectations) > 0 {
		mmGetShort.mock.t.Fatalf("Some expectations are already set for the LongShortService.GetShort method")
	}

	mmGetShort.mock.funcGetShort = f
	mmGetShort.mock.funcGetShortOrigin = minimock.CallerInfo(1)
	return mmGetShort.mock
}

// When sets expectation for the LongShortService.GetShort which will trigger the result defined by the following
// Then helper
func (mmGetShort *mLongShortServiceMockGetShort) When(ctx context.Context, longUrl *model.LongUrls) *LongShortServiceMockGetShortExpectation {
	if mmGetShort.mock.funcGetShort != nil {
		mmGetShort.mock.t.Fatalf("LongShortServiceMock.GetShort mock is already set by Set")
	}

	expectation := &LongShortServiceMockGetShortExpectation{
		mock:               mmGetShort.mock,
		params:             &LongShortServiceMockGetShortParams{ctx, longUrl},
		expectationOrigins: LongShortServiceMockGetShortExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetShort.expectations = append(mmGetShort.expectations, expectation)
	return expectation
}

// Then sets up LongShortService.GetShort return parameters for the expectation previously defined by the When method
func (e *LongShortServiceMockGetShortExpectation) Then(up1 *model.UrlFullInfo, err error) *LongShortServiceMock {
	e.results = &LongShortServiceMockGetShortResults{up1, err}
	return e.mock
}

// Times sets number of times LongShortService.GetShort should be invoked
func (mmGetShort *mLongShortServiceMockGetShort) Times(n uint64) *mLongShortServiceMockGetShort {
	if n == 0 {
		mmGetShort.mock.t.Fatalf("Times of LongShortServiceMock.GetShort mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetShort.expectedInvocations, n)
	mmGetShort.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetShort
}

func (mmGetShort *mLongShortServiceMockGetShort) invocationsDone() bool {
	if len(mmGetShort.expectations) == 0 && mmGetShort.defaultExpectation == nil && mmGetShort.mock.funcGetShort == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetShort.mock.afterGetShortCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetShort.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetShort implements mm_service.LongShortService
func (mmGetShort *LongShortServiceMock) GetShort(ctx context.Context, longUrl *model.LongUrls) (up1 *model.UrlFullInfo, err error) {
	mm_atomic.AddUint64(&mmGetShort.beforeGetShortCounter, 1)
	defer mm_atomic.AddUint64(&mmGetShort.afterGetShortCounter, 1)

	mmGetShort.t.Helper()

	if mmGetShort.inspectFuncGetShort != nil {
		mmGetShort.inspectFuncGetShort(ctx, longUrl)
	}

	mm_params := LongShortServiceMockGetShortParams{ctx, longUrl}

	// Record call args
	mmGetShort.GetShortMock.mutex.Lock()
	mmGetShort.GetShortMock.callArgs = append(mmGetShort.GetShortMock.callArgs, &mm_params)
	mmGetShort.GetShortMock.mutex.Unlock()

	for _, e := range mmGetShort.GetShortMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetShort.GetShortMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetShort.GetShortMock.defaultExpectation.Counter, 1)
		mm_want := mmGetShort.GetShortMock.defaultExpectation.params
		mm_want_ptrs := mmGetShort.GetShortMock.defaultExpectation.paramPtrs

		mm_got := LongShortServiceMockGetShortParams{ctx, longUrl}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetShort.t.Errorf("LongShortServiceMock.GetShort got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetShort.GetShortMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.longUrl != nil && !minimock.Equal(*mm_want_ptrs.longUrl, mm_got.longUrl) {
				mmGetShort.t.Errorf("LongShortServiceMock.GetShort got unexpected parameter longUrl, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetShort.GetShortMock.defaultExpectation.expectationOrigins.originLongUrl, *mm_want_ptrs.longUrl, mm_got.longUrl, minimock.Diff(*mm_want_ptrs.longUrl, mm_got.longUrl))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetShort.t.Errorf("LongShortServiceMock.GetShort got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetShort.GetShortMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetShort.GetShortMock.defaultExpectation.results
		if mm_results == nil {
			mmGetShort.t.Fatal("No results are set for the LongShortServiceMock.GetShort")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetShort.funcGetShort != nil {
		return mmGetShort.funcGetShort(ctx, longUrl)
	}
	mmGetShort.t.Fatalf("Unexpected call to LongShortServiceMock.GetShort. %v %v", ctx, longUrl)
	return
}

// GetShortAfterCounter returns a count of finished LongShortServiceMock.GetShort invocations
func (mmGetShort *LongShortServiceMock) GetShortAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetShort.afterGetShortCounter)
}

// GetShortBeforeCounter returns a count of LongShortServiceMock.GetShort invocations
func (mmGetShort *LongShortServiceMock) GetShortBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetShort.beforeGetShortCounter)
}

// Calls returns a list of arguments used in each call to LongShortServiceMock.GetShort.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetShort *mLongShortServiceMockGetShort) Calls() []*LongShortServiceMockGetShortParams {
	mmGetShort.mutex.RLock()

	argCopy := make([]*LongShortServiceMockGetShortParams, len(mmGetShort.callArgs))
	copy(argCopy, mmGetShort.callArgs)

	mmGetShort.mutex.RUnlock()

	return argCopy
}

// MinimockGetShortDone returns true if the count of the GetShort invocations corresponds
// the number of defined expectations
func (m *LongShortServiceMock) MinimockGetShortDone() bool {
	if m.GetShortMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetShortMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetShortMock.invocationsDone()
}

// MinimockGetShortInspect logs each unmet expectation
func (m *LongShortServiceMock) MinimockGetShortInspect() {
	for _, e := range m.GetShortMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LongShortServiceMock.GetShort at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetShortCounter := mm_atomic.LoadUint64(&m.afterGetShortCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetShortMock.defaultExpectation != nil && afterGetShortCounter < 1 {
		if m.GetShortMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to LongShortServiceMock.GetShort at\n%s", m.GetShortMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to LongShortServiceMock.GetShort at\n%s with params: %#v", m.GetShortMock.defaultExpectation.expectationOrigins.origin, *m.GetShortMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetShort != nil && afterGetShortCounter < 1 {
		m.t.Errorf("Expected call to LongShortServiceMock.GetShort at\n%s", m.funcGetShortOrigin)
	}

	if !m.GetShortMock.invocationsDone() && afterGetShortCounter > 0 {
		m.t.Errorf("Expected %d calls to LongShortServiceMock.GetShort at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetShortMock.expectedInvocations), m.GetShortMock.expectedInvocationsOrigin, afterGetShortCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LongShortServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetLongInspect()

			m.MinimockGetShortInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LongShortServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LongShortServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetLongDone() &&
		m.MinimockGetShortDone()
}
